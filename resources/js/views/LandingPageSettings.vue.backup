<template>
  <div class="p-6">
    <div class="flex justify-between items-center mb-8">
      <div>
        <h1 class="text-3xl font-bold text-gray-900">Landing Page Builder</h1>
        <p class="text-gray-600">Customize your landing page sections and appearance</p>
      </div>
      <button
        @click="addSection"
        class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2"
      >
        <Plus class="w-5 h-5" />
        <span>Add Section</span>
      </button>
    </div>

    <!-- Theme Settings -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
      <h2 class="text-xl font-semibold text-gray-900 mb-4">Theme Settings</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Primary Color</label>
          <div class="flex items-center space-x-3">
            <input
              v-model="themeSettings.primary_color"
              type="color"
              class="w-12 h-10 rounded border border-gray-300"
            />
            <input
              v-model="themeSettings.primary_color"
              type="text"
              class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Secondary Color</label>
          <div class="flex items-center space-x-3">
            <input
              v-model="themeSettings.secondary_color"
              type="color"
              class="w-12 h-10 rounded border border-gray-300"
            />
            <input
              v-model="themeSettings.secondary_color"
              type="text"
              class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Background Color</label>
          <div class="flex items-center space-x-3">
            <input
              v-model="themeSettings.background_color"
              type="color"
              class="w-12 h-10 rounded border border-gray-300"
            />
            <input
              v-model="themeSettings.background_color"
              type="text"
              class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Font Family</label>
          <select
            v-model="themeSettings.font_family"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="Inter">Inter</option>
            <option value="Roboto">Roboto</option>
            <option value="Open Sans">Open Sans</option>
            <option value="Montserrat">Montserrat</option>
            <option value="Lato">Lato</option>
          </select>
        </div>
      </div>
      <div class="mt-6 flex justify-end">
        <button
          @click="saveThemeSettings"
          class="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition-colors"
        >
          Save Theme
        </button>
      </div>
    </div>

    <!-- Navigation Settings -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
      <h2 class="text-xl font-semibold text-gray-900 mb-4">Navigation Settings</h2>
      <div class="space-y-4">
        <div class="flex items-center justify-between">
          <span class="text-sm font-medium text-gray-700">Show Navigation</span>
          <button
            @click="navigationSettings.visible = !navigationSettings.visible"
            :class="['relative inline-flex h-6 w-11 items-center rounded-full transition-colors', navigationSettings.visible ? 'bg-blue-600' : 'bg-gray-200']"
          >
            <span
              :class="['inline-block h-4 w-4 transform rounded-full bg-white transition-transform', navigationSettings.visible ? 'translate-x-6' : 'translate-x-1']"
            />
          </button>
        </div>
        
        <div v-if="navigationSettings.visible" class="mt-4">
          <label class="block text-sm font-medium text-gray-700 mb-2">Navigation Items</label>
          <div class="space-y-3">
            <div
              v-for="(item, index) in navigationSettings.items"
              :key="index"
              class="flex items-center space-x-3 p-3 border border-gray-200 rounded-md"
            >
              <input
                v-model="item.title"
                type="text"
                placeholder="Link text"
                class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
              <input
                v-model="item.url"
                type="text"
                placeholder="URL"
                class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
              <button
                @click="removeNavItem(index)"
                class="text-red-600 hover:text-red-800 p-2"
              >
                <Trash2 class="w-4 h-4" />
              </button>
            </div>
            <button
              @click="addNavItem"
              class="text-blue-600 hover:text-blue-800 flex items-center space-x-1"
            >
              <Plus class="w-4 h-4" />
              <span>Add Navigation Item</span>
            </button>
          </div>
        </div>
      </div>
      <div class="mt-6 flex justify-end">
        <button
          @click="saveNavigationSettings"
          class="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition-colors"
        >
          Save Navigation
        </button>
      </div>
    </div>

    <!-- Layout Sections -->
    <div class="space-y-6">
      <div
        v-for="(section, index) in sections"
        :key="section.id"
        class="bg-white rounded-lg shadow-sm border border-gray-200 p-6"
      >
        <div class="flex justify-between items-start mb-4">
          <div>
            <h3 class="font-semibold text-gray-900">{{ section.section_name }}</h3>
            <p class="text-sm text-gray-500 capitalize">{{ section.section_type }}</p>
          </div>
          <div class="flex space-x-2">
            <button
              @click="toggleSection(section)"
              :class="['p-2 rounded', section.is_active ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-400']"
            >
              <Eye v-if="section.is_active" class="w-4 h-4" />
              <EyeOff v-else class="w-4 h-4" />
            </button>
            <button
              @click="editSection(section)"
              class="p-2 rounded bg-blue-100 text-blue-600 hover:bg-blue-200"
            >
              <Edit3 class="w-4 h-4" />
            </button>
            <button
              @click="moveSection(index, -1)"
              :disabled="index === 0"
              class="p-2 rounded bg-gray-100 text-gray-600 hover:bg-gray-200 disabled:opacity-50"
            >
              <ArrowUp class="w-4 h-4" />
            </button>
            <button
              @click="moveSection(index, 1)"
              :disabled="index === sections.length - 1"
              class="p-2 rounded bg-gray-100 text-gray-600 hover:bg-gray-200 disabled:opacity-50"
            >
              <ArrowDown class="w-4 h-4" />
            </button>
            <button
              @click="deleteSection(section.id)"
              class="p-2 rounded bg-red-100 text-red-600 hover:bg-red-200"
            >
              <Trash2 class="w-4 h-4" />
            </button>
          </div>
        </div>

        <!-- Section Content Preview -->
        <div class="border-t border-gray-200 pt-4">
          <div v-if="section.section_type === 'hero'" class="bg-gradient-to-r from-blue-500 to-indigo-600 p-6 rounded-lg text-white">
            <h2 class="text-2xl font-bold">{{ section.content.title || 'Hero Title' }}</h2>
            <p class="mt-2">{{ section.content.subtitle || 'Hero subtitle' }}</p>
            <button class="mt-4 bg-white text-blue-600 px-4 py-2 rounded-lg font-medium">
              {{ section.content.cta_text || 'CTA Button' }}
            </button>
          </div>
          
          <div v-else-if="section.section_type === 'features'" class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div v-for="(feature, idx) in section.content.features || []" :key="idx" class="border border-gray-200 p-4 rounded-lg">
              <h4 class="font-semibold">{{ feature.title || 'Feature Title' }}</h4>
              <p class="text-sm text-gray-600 mt-1">{{ feature.description || 'Feature description' }}</p>
            </div>
          </div>
          
          <div v-else-if="section.section_type === 'products'" class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div v-for="n in 4" :key="n" class="border border-gray-200 rounded-lg p-4">
              <div class="bg-gray-200 h-32 rounded mb-2"></div>
              <div class="h-4 bg-gray-200 rounded mb-1"></div>
              <div class="h-4 bg-gray-200 rounded w-3/4"></div>
            </div>
          </div>
          
          <div v-else class="text-gray-500 italic">
            {{ section.section_type }} section preview
          </div>
        </div>
      </div>
    </div>

    <!-- Add Section Modal -->
    <div v-if="showAddModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div class="bg-white rounded-lg p-6 w-full max-w-md">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">Add New Section</h3>
        
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Section Type</label>
            <select
              v-model="newSection.section_type"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="hero">Hero Section</option>
              <option value="slider">Slider</option>
              <option value="carousel">Carousel</option>
              <option value="grid">Grid Layout</option>
              <option value="features">Features</option>
              <option value="testimonials">Testimonials</option>
              <option value="products">Products Grid</option>
              <option value="cta">Call to Action</option>
              <option value="navigation">Navigation</option>
              <option value="footer">Footer</option>
            </select>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Section Name</label>
            <input
              v-model="newSection.section_name"
              type="text"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="Enter section name"
            />
          </div>
        </div>
        
        <div class="flex justify-end space-x-3 mt-6">
          <button
            @click="showAddModal = false"
            class="px-4 py-2 text-gray-600 hover:text-gray-800"
          >
            Cancel
          </button>
          <button
            @click="createSection"
            class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
          >
            Add Section
          </button>
        </div>
      </div>
    </div>

    <!-- Edit Section Modal -->
    <div v-if="editingSection" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div class="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">Edit Section: {{ editingSection.section_name }}</h3>
        
        <div class="space-y-6">
          <!-- General Settings -->
          <div>
            <h4 class="font-medium text-gray-900 mb-2">General Settings</h4>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Section Name</label>
                <input
                  v-model="editingSection.section_name"
                  type="text"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Active</label>
                <select
                  v-model="editingSection.is_active"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                >
                  <option :value="true">Yes</option>
                  <option :value="false">No</option>
                </select>
              </div>
            </div>
          </div>
          
          <!-- Content Settings based on section type -->
          <div v-if="editingSection.section_type === 'hero'">
            <h4 class="font-medium text-gray-900 mb-2">Hero Section Content</h4>
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Title</label>
                <input
                  v-model="editingSection.content.title"
                  type="text"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Subtitle</label>
                <input
                  v-model="editingSection.content.subtitle"
                  type="text"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">CTA Text</label>
                  <input
                    v-model="editingSection.content.cta_text"
                    type="text"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">CTA Link</label>
                  <input
                    v-model="editingSection.content.cta_link"
                    type="text"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Background Image URL</label>
                <input
                  v-model="editingSection.content.image_url"
                  type="text"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="https://example.com/image.jpg"
                />
              </div>
            </div>
          </div>
          
          <div v-if="editingSection.section_type === 'features'">
            <h4 class="font-medium text-gray-900 mb-2">Features Content</h4>
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Section Title</label>
                <input
                  v-model="editingSection.content.title"
                  type="text"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Section Subtitle</label>
                <input
                  v-model="editingSection.content.subtitle"
                  type="text"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Features</label>
                <div v-for="(feature, idx) in editingSection.content.features || []" :key="idx" class="border border-gray-200 p-4 rounded-md mb-3">
                  <div class="grid grid-cols-1 md:grid-cols-3 gap-3 mb-3">
                    <div>
                      <label class="block text-xs text-gray-500 mb-1">Icon</label>
                      <input
                        v-model="feature.icon"
                        type="text"
                        class="w-full px-2 py-1 text-xs border border-gray-300 rounded focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                        placeholder="Icon name"
                      />
                    </div>
                    <div>
                      <label class="block text-xs text-gray-500 mb-1">Title</label>
                      <input
                        v-model="feature.title"
                        type="text"
                        class="w-full px-2 py-1 text-xs border border-gray-300 rounded focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                        placeholder="Title"
                      />
                    </div>
                    <div>
                      <label class="block text-xs text-gray-500 mb-1">Position</label>
                      <input
                        v-model="feature.position"
                        type="text"
                        class="w-full px-2 py-1 text-xs border border-gray-300 rounded focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                        placeholder="Position"
                      />
                    </div>
                  </div>
                  <div>
                    <label class="block text-xs text-gray-500 mb-1">Description</label>
                    <textarea
                      v-model="feature.description"
                      rows="2"
                      class="w-full px-2 py-1 text-xs border border-gray-300 rounded focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      placeholder="Description"
                    ></textarea>
                  </div>
                  <button
                    @click="removeFeature(idx)"
                    class="text-red-600 text-xs mt-2 flex items-center"
                  >
                    <Trash2 class="w-3 h-3 mr-1" /> Remove
                  </button>
                </div>
                <button
                  @click="addFeature"
                  class="text-blue-600 text-sm flex items-center"
                >
                  <Plus class="w-4 h-4 mr-1" /> Add Feature
                </button>
              </div>
            </div>
          </div>
          
          <!-- Add more section types as needed -->
          
          <!-- Section Settings -->
          <div>
            <h4 class="font-medium text-gray-900 mb-2">Section Settings</h4>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Sort Order</label>
                <input
                  v-model.number="editingSection.sort_order"
                  type="number"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              
              <!-- Style settings -->
              <div v-if="editingSection.section_type === 'hero'">
                <label class="block text-sm font-medium text-gray-700 mb-1">Background Color</label>
                <input
                  v-model="editingSection.settings.background_color"
                  type="color"
                  class="w-12 h-10 rounded border border-gray-300"
                />
              </div>
            </div>
          </div>
        </div>
        
        <div class="flex justify-end space-x-3 mt-6">
          <button
            @click="editingSection = null"
            class="px-4 py-2 text-gray-600 hover:text-gray-800"
          >
            Cancel
          </button>
          <button
            @click="updateSection"
            class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
          >
            Save Changes
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import { useLandingPageStore } from '../stores/landingPage'
import { Plus, Eye, EyeOff, Edit3, ArrowUp, ArrowDown, Trash2 } from 'lucide-vue-next'

const landingPageStore = useLandingPageStore()

const sections = ref([])
const showAddModal = ref(false)
const editingSection = ref(null)
const newSection = ref({
  section_name: '',
  section_type: 'hero'
})

// Theme and navigation settings
const themeSettings = ref({
  primary_color: '#3b82f6',
  secondary_color: '#60a5fa',
  background_color: '#ffffff',
  font_family: 'Inter'
})

const navigationSettings = ref({
  visible: true,
  items: [
    { title: 'Home', url: '/' },
    { title: 'Products', url: '/catalog' },
    { title: 'About', url: '/about' },
    { title: 'Contact', url: '/contact' }
  ]
})

onMounted(async () => {
  await loadSections()
})

const loadSections = async () => {
  try {
    sections.value = await landingPageStore.getSections()
  } catch (error) {
    console.error('Error loading sections:', error)
  }
}

const addSection = () => {
  newSection.value = {
    section_name: '',
    section_type: 'hero'
  }
  showAddModal.value = true
}

const createSection = async () => {
  try {
    await landingPageStore.createSection(newSection.value)
    await loadSections()
    showAddModal.value = false
  } catch (error) {
    console.error('Error creating section:', error)
  }
}

const editSection = (section) => {
  editingSection.value = JSON.parse(JSON.stringify(section))
}

const updateSection = async () => {
  try {
    await landingPageStore.updateSection(editingSection.value.id, editingSection.value)
    await loadSections()
    editingSection.value = null
  } catch (error) {
    console.error('Error updating section:', error)
  }
}

const deleteSection = async (id) => {
  if (confirm('Are you sure you want to delete this section?')) {
    try {
      await landingPageStore.deleteSection(id)
      await loadSections()
    } catch (error) {
      console.error('Error deleting section:', error)
    }
  }
}

const toggleSection = async (section) => {
  try {
    await landingPageStore.updateSection(section.id, { is_active: !section.is_active })
    await loadSections()
  } catch (error) {
    console.error('Error toggling section:', error)
  }
}

const moveSection = async (index, direction) => {
  if ((direction === -1 && index === 0) || (direction === 1 && index === sections.value.length - 1)) {
    return
  }

  const newIndex = index + direction
  const sectionsArray = [...sections.value]
  
  // Swap sort orders
  const tempOrder = sectionsArray[index].sort_order
  sectionsArray[index].sort_order = sectionsArray[newIndex].sort_order
  sectionsArray[newIndex].sort_order = tempOrder
  
  // Update in database
  try {
    await landingPageStore.updateSection(sectionsArray[index].id, { sort_order: sectionsArray[index].sort_order })
    await landingPageStore.updateSection(sectionsArray[newIndex].id, { sort_order: sectionsArray[newIndex].sort_order })
    await loadSections() // Refresh the list
  } catch (error) {
    console.error('Error moving section:', error)
  }
}

// Theme functions
const saveThemeSettings = async () => {
  try {
    // In a real app, you would save these settings to a dedicated theme table
    // For now, we'll just show a success message
    alert('Theme settings saved successfully!')
  } catch (error) {
    console.error('Error saving theme settings:', error)
  }
}

// Navigation functions
const addNavItem = () => {
  navigationSettings.value.items.push({ title: '', url: '' })
}

const removeNavItem = (index) => {
  navigationSettings.value.items.splice(index, 1)
}

const saveNavigationSettings = async () => {
  try {
    // In a real app, you would save these settings to a dedicated navigation table
    // For now, we'll just show a success message
    alert('Navigation settings saved successfully!')
  } catch (error) {
    console.error('Error saving navigation settings:', error)
  }
}

// Feature functions for features section
const addFeature = () => {
  if (!editingSection.value.content.features) {
    editingSection.value.content.features = []
  }
  editingSection.value.content.features.push({
    icon: '',
    title: '',
    description: '',
    position: ''
  })
}

const removeFeature = (index) => {
  editingSection.value.content.features.splice(index, 1)
}
</script>